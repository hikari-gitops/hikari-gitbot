# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.28.0
# source: query.sql
from typing import Any, AsyncIterator, Optional

import sqlalchemy
import sqlalchemy.ext.asyncio

from src.db import models

CREATE_AUTHOR = """-- name: create_author \\:one
INSERT INTO authors (
  name, bio
) VALUES (
  ?, ?
)
RETURNING id, name, bio
"""


DELETE_AUTHOR = """-- name: delete_author \\:exec
DELETE FROM authors
WHERE id = ?
"""


GET_AUTHOR = """-- name: get_author \\:one
SELECT id, name, bio FROM authors
WHERE id = ? LIMIT 1
"""


LIST_AUTHORS = """-- name: list_authors \\:many
SELECT id, name, bio FROM authors
ORDER BY name
"""


UPDATE_AUTHOR = """-- name: update_author \\:exec
UPDATE authors
set name = ?,
bio = ?
WHERE id = ?
"""


class AsyncQuerier:
    def __init__(self, conn: sqlalchemy.ext.asyncio.AsyncConnection):
        self._conn = conn

    async def create_author(self, *, name: Any, bio: Optional[Any]) -> Optional[models.Author]:
        row = (await self._conn.execute(sqlalchemy.text(CREATE_AUTHOR), {"p1": name, "p2": bio})).first()
        if row is None:
            return None
        return models.Author(id=row[0], name=row[1], bio=row[2])

    async def delete_author(self, *, id: Any) -> None:
        await self._conn.execute(sqlalchemy.text(DELETE_AUTHOR), {"p1": id})

    async def get_author(self, *, id: Any) -> Optional[models.Author]:
        row = (await self._conn.execute(sqlalchemy.text(GET_AUTHOR), {"p1": id})).first()
        if row is None:
            return None
        return models.Author(id=row[0], name=row[1], bio=row[2])

    async def list_authors(self) -> AsyncIterator[models.Author]:
        result = await self._conn.stream(sqlalchemy.text(LIST_AUTHORS))
        async for row in result:
            yield models.Author(id=row[0], name=row[1], bio=row[2])

    async def update_author(self, *, name: Any, bio: Optional[Any], id: Any) -> None:
        await self._conn.execute(sqlalchemy.text(UPDATE_AUTHOR), {"p1": name, "p2": bio, "p3": id})
